# Name of the workflow
name: CI/CD Pipeline
on:
  #Manually trigger the workflow using the GitHub Actions UI
  workflow_dispatch:

  #Trigger the workflow on push from the master branch
  push:
    branches:
      - deploy
#Jobs to run in the workflow
jobs:
  #Testing job to run unit tests
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository
      - name: Check out repository code
        #This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
        uses: actions/checkout@v4

      #Set up JDK and Version
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"

      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      #Run Tests
      - name: Run Tests
        run: mvn -B test

  #SonarCloud job to analyze the code
  sonarCloud:
    #Depends on test's job - it will run after the tests job
    needs: tests
    #Custom name for the job
    name: Sonar Cloud Analysis
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository
      - name: Check out repository code
        #This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      #Set up JDK and Version
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"

      #Set up SonarCloud cache
      - name: Cache SonarCloud packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      #Run SonarCloud analysis
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=JoseGomez14_lab2-arq-soft

  #Build's job to package the application
  build:
    #Depends on sonarCloud's job - it will run after the sonarCloud job
    needs: sonarCloud
    name: Build and Package
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository
      - name: Check out repository code
        #This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      #Set up JDK and Version
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"

      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      #Upload JAR as artifact
      - name: Upload JAR artifact
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v4
        with:
          #Set artifact name
          name: artifact
          #Set jar file path
          path: target/*.jar
          #Set retention days
          retention-days: 5

  #Deploy job to deploy the application to Elastic Beanstalk
  deploy:
    #Depends on build's job - it will run after the build job
    needs: build
    #Custom name for the job
    name: Deploy to Elastic Beanstalk
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Environment variables
    env:
      DEPLOY_PACKAGE: artifact.zip
    steps:

      #Check-out your repository
      - name: Check out repository code
        #This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Checkout only the repository's tip commit instead of the full repository

      #Download package artifact
      - name: Download artifact
        #This action downloads an artifact from a workflow run
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: downloads

      #Zip artifact package
      - name: Zip artifact
        run: |
          cd downloads
          zip ${{ env.DEPLOY_PACKAGE }} *
          cp ${{ env.DEPLOY_PACKAGE }} ../
          cd ..

      #Deploy to Elastic Beanstalk
      - name: Deploy to EB
        #This action deploys an application to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ vars.APP_NAME }}
          environment_name: ${{ vars.ENV_NAME }}
          version_label: ${{ github.run_id }}
          region: ${{ vars.AWS_REGION }}
          deployment_package: ${{ env.DEPLOY_PACKAGE }}
          use_existing_version_if_available: true